@inherits LayoutComponentBase
@using ICSS.Client.Shared
@using ICSS.Shared
@using System.Net
@using System.Security.Claims

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar>
            <AuthorizeView Roles="Admin,Faculty">
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudText Typo="Typo.h6">@subTitle</MudText>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Roles="Student">
                <Authorized>
                    <MudDrawerHeader Class="mud-theme-primary" Dense>
                        <MudStack Row Spacing="0" Class="w-100" Justify="Justify.SpaceEvenly">
                            <MudImage Src="icon-512.png" Width="50" Height="50" />
                            <MudText Typo="Typo.h5" Class="pt-2">ICSS</MudText>
                        </MudStack>
                    </MudDrawerHeader>
                </Authorized>
            </AuthorizeView>
            <MudSpacer />
            <AccessControl />
        </MudAppBar>
        <AuthorizeView Roles="Admin,Faculty">
            <Authorized>
                <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
                    <MudDrawerHeader Class="mud-theme-primary" Dense>
                        <MudStack Row Spacing="0" Class="w-100" Justify="Justify.SpaceEvenly">
                            <MudImage Src="icon-512.png" Width="50" Height="50" />
                            <MudText Typo="Typo.h5" Class="pt-2">ICSS</MudText>
                        </MudStack>
                    </MudDrawerHeader>
                    <NavMenu />
                </MudDrawer>
            </Authorized>
        </AuthorizeView>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }

    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    bool _drawerOpen = true;
    private string currentUserId;
    private string subTitle;
    private Departments facultyDepartment = new();
    private bool isFacultyWithDepartment = false;
    private bool isOnline;

    private async Task ShowInstallPrompt()
    {
        var result = await JSRuntime.InvokeAsync<string>("installPromptHelper.showInstallPrompt");
        Console.WriteLine($"Install prompt result: {result}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("installPromptHelper.registerPrompt");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            CurrentUserId = user.FindFirst(c => c.Type == "sub")?.Value;
        }

        await JSRuntime.InvokeVoidAsync("networkStatus.registerOnlineOfflineEvents", DotNetObjectReference.Create(this));
        IsOnline = await JSRuntime.InvokeAsync<bool>("networkStatus.isOnline");


        if (authenticationState is not null)
        {
            var state = await authenticationState;
            // var returnUrl = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "returnUrl");
            if (state.User.Identity.IsAuthenticated)
            {
                var users = authenticationState.Result.User;

                if (users.IsInRole("Faculty"))
                {
                    await GetUserDepartment();
                }

            }
        }

        await base.OnInitializedAsync();
    }

    public string SubTitle
    {
        get => subTitle;
        set
        {
            subTitle = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public bool IsFacultyWithDepartment
    {
        get => isFacultyWithDepartment;
        set
        {
            isFacultyWithDepartment = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public Departments FacultyDepartment
    {
        get => facultyDepartment;
        set
        {
            facultyDepartment = value;
            InvokeAsync(() => StateHasChanged());
        }

    }


    public string CurrentUserId
    {
        get => currentUserId;
        set
        {
            currentUserId = value;
            InvokeAsync(() => StateHasChanged());
        }

    }

    public bool IsOnline
    {
        get => isOnline;
        set
        {
            isOnline = value;
            InvokeAsync(() => StateHasChanged());
        }

    }

    [JSInvokable]
    public void SetNetworkStatus(bool status)
    {
        isOnline = status;
        InvokeAsync(StateHasChanged);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    private async Task GetUserDepartment()
    {
        try
        {
            var response = await HttpClient.GetAsync($"UserManagement/GetUserDepartment/{CurrentUserId}");

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.NoContent)
                {
                    IsFacultyWithDepartment = false;

                    return;
                }

                var department = await response.Content.ReadFromJsonAsync<Departments>();

                if (department is not null)
                {
                    FacultyDepartment = department;
                    IsFacultyWithDepartment = true;
                }
                else
                {
                    IsFacultyWithDepartment = false;
                    FacultyDepartment = null;
                }
            }
            else
            {
                Snackbar.Add($"Error: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error getting user department data: {ex.Message}", Severity.Error);
        }
        finally
        {

        }
    }
}
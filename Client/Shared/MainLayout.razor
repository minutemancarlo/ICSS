@inherits LayoutComponentBase
@using ICSS.Client.Shared
@using ICSS.Shared
@using System.Net
@using System.Security.Claims

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar>
            <AuthorizeView Roles="Admin,Faculty">
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudText Typo="Typo.h6">@subTitle</MudText>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Roles="Student">
                <Authorized>
                    <MudDrawerHeader Dense>
                        <MudStack Row Spacing="0" Class="w-100" Justify="Justify.SpaceEvenly">
                            <MudImage Src="icon-512.png" Width="50" Height="50" />
                            <MudText Typo="Typo.h5" Class="pt-2">ICSS</MudText>
                        </MudStack>
                    </MudDrawerHeader>
                </Authorized>
            </AuthorizeView>
            <MudSpacer />
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
            <AccessControl />
        </MudAppBar>
        <AuthorizeView Roles="Admin,Faculty">
            <Authorized>
                <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
                    <MudDrawerHeader Dense Style="background-color: var(--mud-palette-appbar-background);color: var(--mud-palette-appbar-text);">
                        <MudStack Row Spacing="0" Class="w-100" Justify="Justify.SpaceEvenly">
                            <MudImage Src="icon-512.png" Width="50" Height="50" />
                            <MudText Typo="Typo.h5" Class="pt-2">ICSS</MudText>
                        </MudStack>
                    </MudDrawerHeader>
                    <NavMenu />
                </MudDrawer>
            </Authorized>
        </AuthorizeView>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }

    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    bool _drawerOpen = true;
    private string currentUserId;
    private string subTitle;
    private bool isAdmin = false;
    private Departments facultyDepartment = new();
    private bool isFacultyWithDepartment = false;
    private bool isOnline;

    private bool _isDarkMode = false;




    private async Task ShowInstallPrompt()
    {
        var result = await JSRuntime.InvokeAsync<string>("installPromptHelper.showInstallPrompt");
        Console.WriteLine($"Install prompt result: {result}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("installPromptHelper.registerPrompt");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            CurrentUserId = user.FindFirst(c => c.Type == "sub")?.Value;
        }

        await JSRuntime.InvokeVoidAsync("networkStatus.registerOnlineOfflineEvents", DotNetObjectReference.Create(this));
        IsOnline = await JSRuntime.InvokeAsync<bool>("networkStatus.isOnline");


        if (authenticationState is not null)
        {
            var state = await authenticationState;
            // var returnUrl = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "returnUrl");
            if (state.User.Identity.IsAuthenticated)
            {
                var users = authenticationState.Result.User;

                if (users.IsInRole("Faculty") || users.IsInRole("Admin"))
                {
                    await GetUserDepartment();
                }

                IsAdmin = users.IsInRole("Admin");

            }
        }

        await base.OnInitializedAsync();
    }

    public string SubTitle
    {
        get => subTitle;
        set
        {
            subTitle = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public bool IsAdmin
    {
        get => isAdmin;
        set
        {
            isAdmin = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public bool IsFacultyWithDepartment
    {
        get => isFacultyWithDepartment;
        set
        {
            isFacultyWithDepartment = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    public Departments FacultyDepartment
    {
        get => facultyDepartment;
        set
        {
            facultyDepartment = value;
            InvokeAsync(() => StateHasChanged());
        }

    }


    public string CurrentUserId
    {
        get => currentUserId;
        set
        {
            currentUserId = value;
            InvokeAsync(() => StateHasChanged());
        }

    }

    public bool IsOnline
    {
        get => isOnline;
        set
        {
            isOnline = value;
            InvokeAsync(() => StateHasChanged());
        }

    }

    [JSInvokable]
    public void SetNetworkStatus(bool status)
    {
        isOnline = status;
        InvokeAsync(StateHasChanged);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    public static readonly MudTheme _theme = new()
        {
            PaletteLight = new PaletteLight()
            {
                Black = "rgba(89,74,226,1)",
                White = "rgba(255,255,255,1)",
                Primary = "rgba(89,74,226,1)",
                PrimaryContrastText = "rgba(255,255,255,1)",
                Secondary = "rgba(255,64,129,1)",
                SecondaryContrastText = "rgba(255,255,255,1)",
                Tertiary = "rgba(30,200,165,1)",
                TertiaryContrastText = "rgba(255,255,255,1)",
                Info = "rgba(33,150,243,1)",
                InfoContrastText = "rgba(255,255,255,1)",
                Success = "rgba(0,200,83,1)",
                SuccessContrastText = "rgba(255,255,255,1)",
                Warning = "rgba(255,152,0,1)",
                WarningContrastText = "rgba(255,255,255,1)",
                Error = "rgba(244,67,54,1)",
                ErrorContrastText = "rgba(255,255,255,1)",
                Dark = "rgba(66,66,66,1)",
                DarkContrastText = "rgba(255,255,255,1)",
                TextPrimary = "rgba(66,66,66,1)",
                TextSecondary = "rgba(0,0,0,0.5372549019607843)",
                TextDisabled = "rgba(0,0,0,0.3764705882352941)",
                ActionDefault = "rgba(0,0,0,0.5372549019607843)",
                ActionDisabled = "rgba(0,0,0,0.25882352941176473)",
                ActionDisabledBackground = "rgba(0,0,0,0.11764705882352941)",
                Background = "rgba(255,255,255,1)",
                BackgroundGray = "rgba(245,245,245,1)",
                Surface = "rgba(255,255,255,1)",
                DrawerBackground = "rgba(255,255,255,1)",
                DrawerText = "rgba(66,66,66,1)",
                DrawerIcon = "rgba(97,97,97,1)",
                AppbarBackground = "rgba(89,74,226,1)",
                AppbarText = "rgba(255,255,255,1)",
                LinesDefault = "rgba(0,0,0,0.11764705882352941)",
                LinesInputs = "rgba(189,189,189,1)",
                TableLines = "rgba(224,224,224,1)",
                TableStriped = "rgba(0,0,0,0.0196078431372549)",
                TableHover = "rgba(0,0,0,0.0392156862745098)",
                Divider = "rgba(224,224,224,1)",
                DividerLight = "rgba(0,0,0,0.8)",
                PrimaryDarken = "rgb(62,44,221)",
                PrimaryLighten = "rgb(118,106,231)",
                SecondaryDarken = "rgb(255,31,105)",
                SecondaryLighten = "rgb(255,102,153)",
                TertiaryDarken = "rgb(25,169,140)",
                TertiaryLighten = "rgb(42,223,187)",
                InfoDarken = "rgb(12,128,223)",
                InfoLighten = "rgb(71,167,245)",
                SuccessDarken = "rgb(0,163,68)",
                SuccessLighten = "rgb(0,235,98)",
                WarningDarken = "rgb(214,129,0)",
                WarningLighten = "rgb(255,167,36)",
                ErrorDarken = "rgb(242,28,13)",
                ErrorLighten = "rgb(246,96,85)",
                DarkDarken = "rgb(46,46,46)",
                DarkLighten = "rgb(87,87,87)",
                HoverOpacity = 0.06,
                RippleOpacity = 0.1,
                RippleOpacitySecondary = 0.2,
                GrayDefault = "#9E9E9E",
                GrayLight = "#BDBDBD",
                GrayLighter = "#E0E0E0",
                GrayDark = "#757575",
                GrayDarker = "#616161",
                OverlayDark = "rgba(33,33,33,0.4980392156862745)",
                OverlayLight = "rgba(255,255,255,0.4980392156862745)",
            },
            PaletteDark = new PaletteDark()
            {
                Black = "rgba(39,39,47,1)",
                Primary = "rgba(119,107,231,1)",
                Info = "rgba(50,153,255,1)",
                Success = "rgba(11,186,131,1)",
                Warning = "rgba(255,168,0,1)",
                Error = "rgba(246,78,98,1)",
                Dark = "rgba(39,39,47,1)",
                TextPrimary = "rgba(255,255,255,0.6980392156862745)",
                TextSecondary = "rgba(255,255,255,0.4980392156862745)",
                TextDisabled = "rgba(255,255,255,0.2)",
                ActionDefault = "rgba(173,173,177,1)",
                ActionDisabled = "rgba(255,255,255,0.25882352941176473)",
                ActionDisabledBackground = "rgba(255,255,255,0.11764705882352941)",
                Background = "rgba(50,51,61,1)",
                BackgroundGray = "rgba(39,39,47,1)",
                Surface = "rgba(55,55,64,1)",
                DrawerBackground = "rgba(39,39,47,1)",
                DrawerText = "rgba(255,255,255,0.4980392156862745)",
                DrawerIcon = "rgba(255,255,255,0.4980392156862745)",
                AppbarBackground = "rgba(39,39,47,1)",
                AppbarText = "rgba(255,255,255,0.6980392156862745)",
                LinesDefault = "rgba(255,255,255,0.11764705882352941)",
                LinesInputs = "rgba(255,255,255,0.2980392156862745)",
                TableLines = "rgba(255,255,255,0.11764705882352941)",
                TableStriped = "rgba(255,255,255,0.2)",
                Divider = "rgba(255,255,255,0.11764705882352941)",
                DividerLight = "rgba(255,255,255,0.058823529411764705)",
                PrimaryDarken = "rgb(90,75,226)",
                PrimaryLighten = "rgb(151,141,236)",
                InfoDarken = "rgb(10,133,255)",
                InfoLighten = "rgb(92,173,255)",
                SuccessDarken = "rgb(9,154,108)",
                SuccessLighten = "rgb(13,222,156)",
                WarningDarken = "rgb(214,143,0)",
                WarningLighten = "rgb(255,182,36)",
                ErrorDarken = "rgb(244,47,70)",
                ErrorLighten = "rgb(248,119,134)",
                DarkDarken = "rgb(23,23,28)",
                DarkLighten = "rgb(56,56,67)",
            },
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "4px",
                DrawerMiniWidthLeft = "56px",
                DrawerMiniWidthRight = "56px",
                DrawerWidthLeft = "240px",
                DrawerWidthRight = "240px",
                AppbarHeight = "64px",
            },
            Typography = new Typography(),
            ZIndex = new ZIndex()
            {
                Drawer = 1100,
                Popover = 1200,
                AppBar = 1300,
                Dialog = 1400,
                Snackbar = 1500,
                Tooltip = 1600,
            },
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task GetUserDepartment()
    {
        try
        {
            var response = await HttpClient.GetAsync($"UserManagement/GetUserDepartment/{CurrentUserId}");

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.NoContent)
                {
                    IsFacultyWithDepartment = false;

                    return;
                }

                var department = await response.Content.ReadFromJsonAsync<Departments>();

                if (department is not null)
                {
                    FacultyDepartment = department;
                    IsFacultyWithDepartment = true;
                }
                else
                {
                    IsFacultyWithDepartment = false;
                    FacultyDepartment = null;
                }
            }
            else
            {
                Snackbar.Add($"Error: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error getting user department data: {ex.Message}", Severity.Error);
        }
        finally
        {

        }
    }
}
@page "/student-index"
@attribute [Authorize(Roles = "Student")]
@layout MainLayout
@using ICSS.Shared
@using System.Net

<MudContainer Class="py-4 py-sm-8 py-md-12">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="w-100" Style="background-color: #1abc9c; color: white">
                <MudText Typo="Typo.h6" Class="fw-bold p-2">
                    My Schedule
                </MudText>

            </MudPaper>

            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudStack Row Justify="Justify.SpaceBetween">
                <MudCard Style="background-color: #ecf0f1;">
                    <MudCardContent>
                        <MudStack Row AlignItems="AlignItems.Baseline">
                            <MudIconButton Icon="fa-solid fa-chalkboard" Color="Color.Error" Size="Size.Medium" Ripple="false" Class="rounded-circle mb-2" Style="background-color: rgba(var(--mud-palette-primary-rgb), var(--icon-opacity)) !important; cursor: default;" />
                            <MudText Typo="Typo.h6" Class="mb-2">Current Schedule</MudText>
                        </MudStack>
                        @if (currentSchedule is null)
                        {
                            <MudText Typo="Typo.h6">No Schedule Selected</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Class="fw-bold">@currentSchedule.Subject?.SubjectName</MudText>
                            <MudText Typo="Typo.body2">Instructor: @currentSchedule.Faculty?.FacultyName</MudText>
                            <MudText Typo="Typo.body2">Room: @currentSchedule.Room?.RoomName</MudText>
                        }
                    </MudCardContent>
                </MudCard>
                <MudCard Style="background-color: #ecf0f1;">
                    <MudCardContent>
                        <MudStack Row AlignItems="AlignItems.Baseline">
                            <MudIconButton Icon="fa-solid fa-calendar" Color="Color.Primary" Size="Size.Medium" Ripple="false" Class="rounded-circle mb-2" Style="background-color: rgba(var(--mud-palette-primary-rgb), var(--icon-opacity)) !important; cursor: default;" />
                            <MudStack>
                                <MudText Typo="Typo.h6">@CurrentDate</MudText>
                            </MudStack>
                        </MudStack>
                        <MudStack Row AlignItems="AlignItems.Baseline">
                            <MudIconButton Icon="fa-solid fa-clock" Color="Color.Primary" Size="Size.Medium" Ripple="false" Class="rounded-circle mb-2" Style="background-color: rgba(var(--mud-palette-primary-rgb), var(--icon-opacity)) !important; cursor: default;" />
                            <MudStack>
                                <MudText Typo="Typo.h6" Class="mb-2">@CurrentTime</MudText>
                            </MudStack>
                        </MudStack>

                    </MudCardContent>
                </MudCard>
                <MudCard Style="background-color: #ecf0f1;">
                    <MudCardContent>
                        <MudStack Row AlignItems="AlignItems.Baseline">
                            <MudIconButton Icon="fa-solid fa-forward" Color="Color.Success" Size="Size.Medium" Ripple="false" Class="rounded-circle mb-2" Style="background-color: rgba(var(--mud-palette-primary-rgb), var(--icon-opacity)) !important; cursor: default;" />
                            <MudText Typo="Typo.h6" Class="mb-2">Next Schedule</MudText>
                        </MudStack>
                        @if (nextSchedule is null)
                        {
                            <MudText Typo="Typo.h6">No Schedule Selected</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Class="fw-bold">@nextSchedule.Subject?.SubjectName</MudText>
                            <MudText Typo="Typo.body2">Instructor: @nextSchedule.Faculty?.FacultyName</MudText>
                            <MudText Typo="Typo.body2">Room: @nextSchedule.Room?.RoomName</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudStack>
            <MudCalendar Class="w-100" DayStartTime="@TimeOnly.Parse(" 08:00")" ShowMonth="false" ShowTodayButton="false" ShowDatePicker="false" ShowPrevNextButtons="false" ShowDay="false" ShowWeek="true"
                         DayTimeInterval="CalendarTimeInterval.Minutes30" ShowCurrentTime="true" Use24HourClock="false" Items="items" DayCellHeight="100"
                         FirstDayOfWeek="DayOfWeek.Monday">
                <ToolbarContent>
                    <MudStack Row Class="w-100">
                        <MudSelect Disabled="@(!MainLayout.IsOnline)" ValueChanged="OnSelectSchedule" T="int?" Clearable Label="Select Schedule" FullWidth AdornmentIcon="fa-solid fa-calendar-days" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                            @foreach (var item in scheduleRequests.OrderBy(x => x.ScheduleId).ToList())
                            {
                                <MudSelectItem T="int?" Value="@(item.ScheduleId)">@($"{item.Course?.CourseCode} {item.Section?.SchoolYear}: Section {item.Section?.SectionName} - {item.Section?.YearLevel.ToString().Replace("_", " ")}/{item.Semester.ToString().Replace("_", " ")}")</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton Size="Size.Medium" Variant="Variant.Filled" Disabled="!isEnabledExport" StartIcon="fa-solid fa-file-pdf" Class="my-2 mx-1" Color="Color.Info">Export to PDF</MudButton>

                    </MudStack>
                </ToolbarContent>
                <CellTemplate>
                    <MudStack AlignItems="AlignItems.Stretch" Class="mud-cal-cell-template">
                        <div style="width: 100%; height: 100%;color: white; background-color: @GetColor(((CustomItem)context).Color); border-radius: 12px; padding: 8px;">
                            <MudText Typo="Typo.body2" Class="fw-bold py-3 text-center">@((((CustomItem)context).Room is not null ? ((CustomItem)context).Room?.RoomName : "TBD"))</MudText>
                            <MudDivider />
                            <MudText Typo="Typo.body2" Class="py-3 text-center">@context.Text</MudText>
                            <MudDivider />
                            <MudText Typo="Typo.body2" Class="fw-bold py-3 text-center">@((((CustomItem)context).Faculty is not null ? ((CustomItem)context).Faculty?.FacultyName : "TBD"))</MudText>
                        </div>
                    </MudStack>
                </CellTemplate>
            </MudCalendar>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    private Sections? mySection;
    private List<ScheduleTimeSlot>? scheduleTimeSlots = new();
    private List<ScheduleRequest>? scheduleRequests = new();
    private int? selectedScheduleId;
    private Sections? selectedSection;
    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";
    private List<CustomItem>? items = new();
    private bool isEnabledExport = false;

    private CustomItem? currentSchedule;
    private CustomItem? nextSchedule;

    private class CustomItem : CalendarItem
    {
        public int? TimeSlotId { get; set; }
        public Subjects? Subject { get; set; }
        public FacultyModel? Faculty { get; set; }
        public Rooms? Room { get; set; }
        public DayOfWeek? Day { get; set; }
        public TimeSpan? StartTime { get; set; }
        public TimeSpan? EndTime { get; set; }
        public Color Color { get; set; } = Color.Primary;
    }

    private string CurrentDate => DateTime.Now.ToString("MMMM d, yyyy");
    private string CurrentTime => DateTime.Now.ToString("h:mm:ss tt");
    protected override async Task OnInitializedAsync()
    {

        try
        {

            if (MainLayout.IsOnline)
            {
                var response = await HttpClient.GetAsync($"SectionManagement/GetSectionByUserId/{MainLayout.CurrentUserId}");
                if (response.IsSuccessStatusCode)
                {

                    if (response.StatusCode == HttpStatusCode.NoContent)
                    {
                        mySection = null;
                        return;
                    }

                    var section = await response.Content.ReadFromJsonAsync<Sections>();

                    if (section is not null)
                    {
                        mySection = section;
                    }
                    else
                    {
                        mySection = null;
                    }

                    await LocalStorage.SetItemAsync("mySection", mySection);
                    StateHasChanged();

                }
                else
                {
                    Snackbar.Add($"Error: {response.ReasonPhrase}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<Sections?>("mySection");
                mySection = cachedData ?? new Sections();
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            await GetSchedules();
            await OnGetScheduleList();
            if (scheduleRequests.Any())
            {
                scheduleRequests = scheduleRequests.Where(x => x.Section?.SectionId == mySection?.SectionId).ToList();
            }

        }
        await base.OnInitializedAsync();
        while (true)
        {
            StateHasChanged();
            await Task.Delay(1000);
        }
        
    }

    private void OnSelectSchedule(int? value)
    {
        selectedScheduleId = value;


        if (selectedScheduleId is not null && mySection is not null)
        {
            if (scheduleTimeSlots.Any())
            {
                items?.Clear();
                var selectedSchedule = scheduleTimeSlots.Where(x => x.ScheduleId == value);
                if (selectedSchedule.Any())
                {
                    var timeZone = TimeZoneInfo.FindSystemTimeZoneById("Asia/Manila");
                    var now = TimeZoneInfo.ConvertTime(DateTime.Now, timeZone);

                    var customItems = selectedSchedule.Select(slot =>
                            {
                                var baseDate = GetAdjustedDate(slot.Day, now);

                                return new CustomItem
                                    {
                                        TimeSlotId = slot.ScheduleId,
                                        Subject = slot.Subject,
                                        Faculty = slot.Faculty,
                                        Room = slot.Room,
                                        Day = slot.Day,
                                        StartTime = slot.StartTime,
                                        EndTime = slot.EndTime,
                                        Start = baseDate.Date.Add(slot.StartTime),
                                        End = baseDate.Date.Add(slot.EndTime),
                                        Text = slot.Subject?.SubjectName ?? "N/A",
                                        Color = Color.Primary
                                    };
                            }).ToList();
                    items.AddRange(customItems);

                    isEnabledExport = true;


                    currentSchedule = items.FirstOrDefault(item => item.Start.TimeOfDay <= now.TimeOfDay && item.End.HasValue && item.End.Value.TimeOfDay >= now.TimeOfDay && item.Day == now.DayOfWeek);
                    nextSchedule = items.FirstOrDefault(item => item.Start.TimeOfDay > now.TimeOfDay && item.Day == now.DayOfWeek);

                }

            }
            else
            {
                Snackbar.Add("No Schedules found", Severity.Error);
            }
        }


    }


    private DateTime GetAdjustedDate(DayOfWeek? scheduleDay, DateTime today)
    {
        if (!scheduleDay.HasValue) return today;

        int daysOffset = scheduleDay <= today.DayOfWeek
            ? -(today.DayOfWeek - scheduleDay.Value)
            : (scheduleDay.Value - today.DayOfWeek);

        if (today.DayOfWeek == DayOfWeek.Saturday || today.DayOfWeek == DayOfWeek.Sunday)
            daysOffset -= 7;

        return today.AddDays(daysOffset);
    }


    private async Task GetSchedules()
    {
        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await HttpClient.GetAsync($"ScheduleManagement/GetScheduleByUserId/{MainLayout.CurrentUserId}");

                if (response.IsSuccessStatusCode)
                {
                    if (response.StatusCode == HttpStatusCode.NoContent)
                    {
                        scheduleTimeSlots = null;
                        return;
                    }

                    var schedule = await response.Content.ReadFromJsonAsync<List<ScheduleTimeSlot>>();

                    if (schedule is not null)
                    {
                        scheduleTimeSlots = schedule;
                        Console.WriteLine(scheduleTimeSlots.Count());
                    }
                    else
                    {
                        scheduleTimeSlots = null;
                    }

                    await LocalStorage.SetItemAsync("studentScheduleTimeSlots", scheduleTimeSlots);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Error: {response.ReasonPhrase}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<ScheduleTimeSlot>>("studentScheduleTimeSlots");
                scheduleTimeSlots = cachedData ?? new List<ScheduleTimeSlot>();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error getting schedule data: {ex.Message}", Severity.Error);
        }
    }


    private async Task OnGetScheduleList()
    {


        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<ScheduleRequest>>("ScheduleManagement/GetScheduleList");
                if (response.IsSuccess)
                {
                    scheduleRequests = response.Data;

                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load schedules: {response.Message}", Severity.Error);
                }
                await LocalStorage.SetItemAsync("studentsSheduleRequests", scheduleRequests);
                StateHasChanged();

            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<ScheduleRequest>>("studentsSheduleRequests");
                scheduleRequests = cachedData ?? new List<ScheduleRequest>();
            }




        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }

    }

}
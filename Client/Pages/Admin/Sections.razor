@page "/manage-section"
@attribute [Authorize]
@layout MainLayout
@using ICSS.Shared
@using SectionsModel = ICSS.Shared.Sections
@using ICSS.Client.Pages.Admin.Components


<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>
        <MudItem xs="12">
            @if (!MainLayout.IsOnline)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Style="margin-bottom: 16px;" Visible="!isOnline">
                    You are currently offline. Data may not be up-to-date.
                </MudAlert>
            }
        </MudItem>
        <MudItem xs="12">
            <MudTabs Elevation="2" Rounded="true" Outlined="true" Color="Color.Tertiary">
                <MudTabPanel Text="Sections" Icon="fa-solid fa-house-user">
                    <MudDataGrid Items="sections" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon Loading="isLoading" Class="my-5">
                        <ToolBarContent>
                            <MudBreakpointProvider>
                                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                    <MudButton Size="Size.Small" OnClick="OnShowAddSectionDialog" StartIcon="fa-solid fa-circle-plus" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Add Sections
                                    </MudButton>
                                    <MudButton Size="Size.Small" StartIcon="fa-solid fa-refresh" OnClick="OnGetSections" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Refresh
                                    </MudButton>
                                </MudHidden>
                                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                    <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                </MudHidden>
                            </MudBreakpointProvider>

                            <MudSpacer />
                        </ToolBarContent>
                        <Columns>
                            <TemplateColumn Title="Actions" HeaderClass="data-grid text-nowrap text-white" Hideable="false">
                                <CellTemplate>
                                    <MudStack Row>
                                        @*    <MudTooltip Text="Edit Section">
                                            <MudIconButton Icon="fa-solid fa-edit" OnClick="@(() => OnShowUpdateSectionDialog(context.Item))" Size="Size.Medium" Color="Color.Info" Variant="Variant.Filled" Disabled="@(!MainLayout.IsOnline)"  />
                                        </MudTooltip> *@
                                        <MudTooltip Text="@(context.Item.IsDeleted?"Enable Section":"Disable Section")">
                                            <MudIconButton Icon="@(context.Item.IsDeleted?"fa-solid fa-circle-check":"fa-solid fa-ban")" Size="Size.Medium" Color="@(context.Item.IsDeleted?Color.Success:Color.Error)" OnClick="@(() => OnDisableSection(context.Item,(!context.Item.IsDeleted)))" Variant="Variant.Filled" Disabled="@(!MainLayout.IsOnline)" />
                                        </MudTooltip>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Course.CourseCode" Title="Course" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.SchoolYear" Title="School Year" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.YearLevel" Title="Year Level" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudText Typo="Typo.body2">@context.Item.YearLevel.ToString().Replace("_", " ")</MudText>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.SectionName" Title="Section" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.IsSummer" Title="Is Summer Class" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudChip Variant="Variant.Filled" Size="Size.Small" Color="@(context.Item.IsSummer?Color.Info:Color.Success)">@(context.Item.IsSummer ? "Summer Class" : "Non Summer Class")</MudChip>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.StudentCount" Title="Student Count" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />

                            <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" Hideable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" Hideable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>No Records to show</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading Content...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="SectionsModel" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>
                <MudTabPanel Text="Student Section Assignment" Icon="fa-solid fa-house-medical">

                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    private List<SectionsModel> sections = new();
    private bool isLoading = false;



    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Sections Management";
        await OnGetSections();
        await base.OnInitializedAsync();
    }

    private async Task OnShowAddSectionDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<SectionDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.section, new SectionsModel()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<SectionDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnGetSections();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }


    private async Task OnDisableSection(SectionsModel sections, bool action)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };
            string message = String.Empty;
            string actionMessage = String.Empty;
            if (action)
            {
                actionMessage = "Disable Section";
                message = "This section will not be included on the next scheduling and all students in this section will be removed from it. Are you sure you want to disable this section?";
            }
            else
            {
                actionMessage = "Enable Section";
                message = $"This section was previously disabled. This action will enable this section and will include it in the next scheduling. Do you want to enable this section?";
            }
            var parameters = new DialogParameters<ConfirmationDialog>
            {
                { x => x.Action, actionMessage },
                {x => x.Message, message}
            };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                var confirmed = (bool)result.Data;
                if (confirmed == true)
                {
                    sections.IsDeleted = action;
                    var response = await ApiHelper.PostAsync<SectionsModel, ApiResponse<int>>($"SectionManagement/UpdateSection?userId={MainLayout.CurrentUserId}", sections);

                    if (response.IsSuccess)
                    {
                        Snackbar.Add("Section successfully updated", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add($"Error: {response.Message}", Severity.Error);
                    }
                    Snackbar.Add("Section successfully updated", Severity.Success);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            await OnGetSections();
        }
    }


    private async Task OnShowUpdateSectionDialog(SectionsModel sections)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<SectionDialog>
            {
                { x => x.Action, "Update" },
                { x => x.Icon, "pen-to-square" },
                {x => x.section, sections},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<SectionDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnGetSections();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }


    private async Task OnGetSections()
    {
        isLoading = true;

        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<SectionsModel>>("SectionManagement/GetSections");
                if (response.IsSuccess)
                {
                    sections = response.Data;

                    await LocalStorage.SetItemAsync("sections", sections);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load sections: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<SectionsModel>>("sections");
                sections = cachedData ?? new List<SectionsModel>();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

}
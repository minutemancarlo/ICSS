@page "/manage-department"
@attribute [Authorize]
@layout MainLayout
@using ICSS.Shared
@using ICSS.Client.Pages.Admin.Components


<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>
        <MudItem xs="12">
            @if (!MainLayout.IsOnline)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Style="margin-bottom: 16px;" Visible="!isOnline">
                    You are currently offline. Data may not be up-to-date.
                </MudAlert>
            }
        </MudItem>
        <MudItem xs="12">
            <MudTabs Elevation="2" Rounded="true" Outlined="true" Color="Color.Tertiary">
                <MudTabPanel Text="Departments" Icon="fa-solid fa-school">
                    <MudDataGrid Items="departmentsTemp" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon Loading="isLoading">
                        <ToolBarContent>
                            <MudBreakpointProvider>
                                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                    <MudButton Size="Size.Small" OnClick="OnShowAddDepartmentDialog" StartIcon="fa-solid fa-circle-plus" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Add Department
                                    </MudButton>
                                    <MudButton Size="Size.Small" OnClick="OnLoadDepartments" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Refresh
                                    </MudButton>
                                </MudHidden>
                                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                    <MudIconButton ButtonType="ButtonType.Button" OnClick="OnShowAddDepartmentDialog" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                                    <MudIconButton ButtonType="ButtonType.Button" OnClick="OnLoadDepartments" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                </MudHidden>
                            </MudBreakpointProvider>
                            <MudSpacer />
                            <MudTextField T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <TemplateColumn Title="Actions" HeaderClass="data-grid text-nowrap text-white" Hideable="false">
                                <CellTemplate>
                                    <MudTooltip Text="Edit Course Information">
                                        <MudIconButton Icon="fa-solid fa-edit" Size="Size.Medium" Color="Color.Info" Variant="Variant.Filled" Disabled="@(!MainLayout.IsOnline)" OnClick="@(() => OnShowUpdateDepartmentDialog(context.Item))" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.DepartmentCode" Title="Department Code" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.DepartmentName" Title="Department Name" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>No Records to show</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading Content...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="Departments" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>
                <MudTabPanel Text="Members" Icon="fa-solid fa-chalkboard-user">
                    <MudItem xs="6">
                        <MudAutocomplete T="Departments"
                        Class="p-2" Dense
                        Label="Select Department"
                        @bind-Value="selectedDepartment"
                        SearchFunc="SearchDepartments"
                        ToStringFunc="(dept) => dept.DepartmentName"
                        ResetValueOnEmptyText
                        CoerceText CoerceValue ShowProgressIndicator
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        Variant="Variant.Outlined"
                        AdornmentColor="Color.Primary" />
                    </MudItem>
                    <MudItem xs="12" Class="d-flex flex-column align-center justify-center">
                        <MudTransferList @ref="_transferList" T="Departments" @bind-StartCollection="_startCollection" @bind-EndCollection="_endCollection" Color="Color.Primary"
                                         StyleListCommon="background-color: var(--mud-palette-background-gray); width: 200px" MultiSelection="true" MaxItems="10" SelectAllType="SelectAllType.Buttons"
                                         OrderFunc="@(_orderOnTransfer == false ? null : new Func<ICollection<Departments>, ICollection<Departments>>(OrderMethod))" ButtonVariant="Variant.Filled"
                                         AllowDoubleClick="false" SearchBoxStart SearchBoxEnd
                                         StartTitle="Available Members" EndTitle="Added Members" />
                    </MudItem>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }

    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    private List<Departments> departments = new();
    private List<Departments> departmentsTemp = new();

    MudTransferList<Departments> _transferList = new();
    ICollection<Departments> _startCollection = new List<Departments>();
    ICollection<Departments> _endCollection = new List<Departments>();
    private bool _orderOnTransfer = true;

    private bool isLoading = false;

    private Departments selectedDepartment;
    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Department Management";
        await OnLoadDepartments();
        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<Departments>> SearchDepartments(string value, CancellationToken token)
    {
        await Task.Delay(5, token); // Simulate API delay

        if (string.IsNullOrWhiteSpace(value))
            return new List<Departments>();

        return departments.Where(d => d.DepartmentName.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                                      d.DepartmentCode.Contains(value, StringComparison.OrdinalIgnoreCase))
                          .ToList();
    }



    private ICollection<Departments> OrderMethod(ICollection<Departments> e)
    {
        return e.OrderBy(d => d.DepartmentName).ToList(); // Replace 'Name' with the property you want to order by
    }

    private bool CheckTransfer(bool startToEnd)
    {
        var valuesStart = _transferList.GetStartListSelectedValues();
        var valuesEnd = _transferList.GetEndListSelectedValues();

        // If you want to perform any logic based on the selections, add it here
        // For example, checking if at least one item is selected:
        return (startToEnd ? valuesStart.Count > 0 : valuesEnd.Count > 0);
    }


    #region Department Dialogs
    private async Task OnShowAddDepartmentDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<DepartmentDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.department, new Departments()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<DepartmentDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnLoadDepartments();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnShowUpdateDepartmentDialog(Departments departments)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<DepartmentDialog>
            {
                { x => x.Action, "Update" },
                { x => x.Icon, "pen-to-square" },
                {x => x.department, departments},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<DepartmentDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnLoadDepartments();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }
    #endregion


    #region Data Loading
    private async Task OnLoadDepartments()
    {
        isLoading = true;

        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<Departments>>("DepartmentManagement/GetAllDepartments");
                if (response.IsSuccess)
                {
                    departments = response.Data;
                    departmentsTemp = departments;
                    await LocalStorage.SetItemAsync("departments", departments);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load departments: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<Departments>>("departments");
                departments = cachedData ?? new List<Departments>();
                departmentsTemp = departments;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    #endregion

}
@page "/manage-course"
@attribute [Authorize]
@layout MainLayout
@using ICSS.Shared
@using ICSS.Client.Pages.Admin.Components
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>
        <MudItem xs="12">
             <MudTabs Elevation="2" Rounded="true" Outlined="true" Color="Color.Tertiary">
                <MudTabPanel Text="Courses" Icon="fa-solid fa-graduation-cap">
                    <MudDataGrid Items="courses" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon>
                        <ToolBarContent>
                            <MudBreakpointProvider>
                                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                    <MudButton Size="Size.Small" StartIcon="fa-solid fa-circle-plus" OnClick="OnShowAddCourseDialog" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Add Course
                                    </MudButton>
                                    <MudButton Size="Size.Small" OnClick="OnLoadCourses" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Refresh
                                    </MudButton>
                                </MudHidden>
                                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                    <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="OnShowAddCourseDialog" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                                    <MudIconButton ButtonType="ButtonType.Button" OnClick="OnLoadCourses" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                </MudHidden>
                            </MudBreakpointProvider>

                            <MudSpacer />
                            <MudTextField ValueChanged="@(s=>OnsearchCourses(s))" T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.CourseCode" Title="Course Code" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.CourseName" Title="Description" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <TemplateColumn Title="Actions" HeaderClass="data-grid text-nowrap text-white" Hideable="false">
                                <CellTemplate>
                                    <MudTooltip Text="Edit Course Information">
                                        <MudIconButton Icon="fa-solid fa-edit" Size="Size.Medium" Color="Color.Info" Variant="Variant.Filled" Disabled="@(!MainLayout.IsOnline)" OnClick="@(() => OnShowUpdateCourseDialog(context.Item))" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>No Records to show</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading Content...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="Course" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>
                <MudTabPanel Text="Subjects" Icon="fa-solid fa-book">
                    <MudDataGrid Items="subjects" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon>
                        <ToolBarContent>
                            <MudBreakpointProvider>
                                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                    <MudButton Size="Size.Small" StartIcon="fa-solid fa-circle-plus" OnClick="OnShowAddSubjectDialog" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Add Subject
                                    </MudButton>
                                    <MudButton Size="Size.Small" OnClick="OnLoadSubjects" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                        Refresh
                                    </MudButton>
                                </MudHidden>
                                <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                    <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" OnClick="OnShowAddSubjectDialog" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                                    <MudIconButton ButtonType="ButtonType.Button" OnClick="OnLoadSubjects" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                </MudHidden>
                            </MudBreakpointProvider>

                            <MudSpacer />
                            <MudTextField ValueChanged="@(s=>OnsearchSubjects(s))" T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.SubjectCode" Title="Subject Code" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.SubjectName" Title="Subject Name" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.LectureHour" Title="Lecture Hour" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.LabHour" Title="Laboratory Hour" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.MaxStudent" Title="Maximum Student" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.Units" Title="Units" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                            <PropertyColumn Property="x => x.IsActive" Title="Status" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                <CellTemplate>
                                    @if (context.Item.IsActive)
                                    {
                                        <MudChip Variant="Variant.Filled" Color="Color.Success" Size="Size.Small">Active</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Not Active</MudChip>
                                    }
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                        <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </PropertyColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>No Records to show</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading Content...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="Subjects" />
                        </PagerContent>
                    </MudDataGrid>
                    </MudTabPanel>
            </MudTabs>          
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }

    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    private List<Course> courses = new();
    private List<Subjects> subjects = new();
    private List<Course> coursesTemp = new();
    private List<Subjects> subjectsTemp = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Courses and Subjects Management";
        await OnLoadCourses();
        await OnLoadSubjects();
        await base.OnInitializedAsync();
    }

    private async Task OnShowAddCourseDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<CourseDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.course, new Course()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<CourseDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnLoadCourses();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnShowAddSubjectDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<SubjectDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.subjects, new Subjects()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<SubjectDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnLoadSubjects();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnShowUpdateCourseDialog(Course course)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<CourseDialog>
            {
                { x => x.Action, "Update" },
                { x => x.Icon, "pen-to-square" },
                {x => x.course, course},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<CourseDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await OnLoadCourses();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }


    }


    private async Task OnLoadCourses()
    {
        isLoading = true;

        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<Course>>("CourseAndSubject/GetAllCourses");
                if (response.IsSuccess)
                {
                    courses = response.Data;
                    coursesTemp = courses;
                    await LocalStorage.SetItemAsync("courses", courses);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load courses: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<Course>>("courses");
                courses = cachedData ?? new List<Course>();
                coursesTemp = courses;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnLoadSubjects()
    {
        isLoading = true;

        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<Subjects>>("CourseAndSubject/GetAllSubjects");
                if (response.IsSuccess)
                {
                    subjects = response.Data;
                    subjectsTemp = subjects;
                    await LocalStorage.SetItemAsync("subjects", subjects);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load subjects: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<Subjects>>("subjects");
                subjects= cachedData ?? new List<Subjects>();
                subjectsTemp = subjects;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnsearchCourses(string query)
    {

        coursesTemp = courses.Where(data =>
           {
               if (string.IsNullOrWhiteSpace(query))
                   return true;
               if (data.CourseCode.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               if (data.CourseName.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               return false;
           }).ToList();
    }

    private async Task OnsearchSubjects(string query)
    {

        subjectsTemp= subjects.Where(data =>
           {
               if (string.IsNullOrWhiteSpace(query))
                   return true;
               if (data.SubjectCode.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               if (data.SubjectName.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               return false;
           }).ToList();
    }

}
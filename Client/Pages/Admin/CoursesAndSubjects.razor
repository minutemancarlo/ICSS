@page "/manage-course"
@attribute [Authorize]
@layout MainLayout
@using ICSS.Shared
@using ICSS.Client.Pages.Admin.Components
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanels>
                <MudExpansionPanel Expanded HeaderClass="mud-theme-dark">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="fa-solid fa-graduation-cap" class="mr-3"></MudIcon>
                            Courses
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudDataGrid Items="courses" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon>
                            <ToolBarContent>
                                <MudBreakpointProvider>
                                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                        <MudButton Size="Size.Small" StartIcon="fa-solid fa-circle-plus" OnClick="OnShowAddCourseDialog" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                            Add Course
                                        </MudButton>
                                        <MudButton Size="Size.Small" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                            Refresh
                                        </MudButton>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="OnShowAddCourseDialog" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                    </MudHidden>
                                </MudBreakpointProvider>

                                <MudSpacer />
                                <MudTextField T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                            </ToolBarContent>
                            <Columns>
                                <PropertyColumn Property="x => x.CourseCode" Title="Course Code" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.CourseName" Title="Description" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                    <CellTemplate>
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                            <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                    <CellTemplate>
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                            <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                            <NoRecordsContent>
                                <MudText>No Records to show</MudText>
                            </NoRecordsContent>
                            <LoadingContent>
                                <MudText>Loading Content...</MudText>
                            </LoadingContent>
                            <PagerContent>
                                <MudDataGridPager T="Course" />
                            </PagerContent>
                        </MudDataGrid>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel HeaderClass="mud-theme-dark">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="fa-solid fa-book" class="mr-3"></MudIcon>
                            Subjects
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudDataGrid Items="subjects" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon>
                            <ToolBarContent>
                                <MudBreakpointProvider>
                                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                                        <MudButton Size="Size.Small" StartIcon="fa-solid fa-circle-plus" OnClick="OnShowAddSubjectDialog" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                            Add Subject
                                        </MudButton>
                                        <MudButton Size="Size.Small" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                            Refresh
                                        </MudButton>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" OnClick="OnShowAddSubjectDialog" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                                    </MudHidden>
                                </MudBreakpointProvider>

                                <MudSpacer />
                                <MudTextField T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                            </ToolBarContent>
                            <Columns>
                                <PropertyColumn Property="x => x.SubjectCode" Title="Subject Code" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.SubjectName" Title="Subject Name" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.LectureHour" Title="Lecture Hour" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.LabHour" Title="Laboratory Hour" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.MaxStudent" Title="Maximum Student" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.Units" Title="Units" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                                <PropertyColumn Property="x => x.IsActive" Title="Status" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                                    <CellTemplate>
                                        @if (context.Item.IsActive)
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Success" Size="Size.Small">Active</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Not Active</MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                    <CellTemplate>
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                            <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" HeaderClass="data-grid text-nowrap text-white" Hidden>
                                    <CellTemplate>
                                        <MudStack Spacing="0">
                                            <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                            <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                            <NoRecordsContent>
                                <MudText>No Records to show</MudText>
                            </NoRecordsContent>
                            <LoadingContent>
                                <MudText>Loading Content...</MudText>
                            </LoadingContent>
                            <PagerContent>
                                <MudDataGridPager T="Subjects" />
                            </PagerContent>
                        </MudDataGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }

    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    private List<Course> courses = new();
    private List<Subjects> subjects = new();

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Courses and Subjects Management";
        await base.OnInitializedAsync();
    }

    private async Task OnShowAddCourseDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<AddCourseDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.course, new Course()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<AddCourseDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

     private async Task OnShowAddSubjectDialog()
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<AddSubjectDialog>
            {
                { x => x.Action, "Add" },
                { x => x.Icon, "circle-plus" },
                {x => x.subjects, new Subjects()},
                { x => x.currentUserId, MainLayout.CurrentUserId }
            };

            var dialog = await DialogService.ShowAsync<AddSubjectDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

}
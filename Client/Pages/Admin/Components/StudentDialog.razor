@using ICSS.Shared
@using ICSS.Client.Pages.Validations

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@($"fa-solid fa-user-{Icon}")"></MudIcon>
            @Action Student Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="studentModel" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0">
            <MudStack>
                <MudNumericField @bind-Value="studentModel.IdNumber" For="@(() => studentModel.IdNumber)" Label="ID Number" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons />
                <MudTextField @bind-Value="studentModel.Name" For="@(() => studentModel.Name)" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="studentModel.Email" InputType="InputType.Email" For="@(() => studentModel.Email)" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudSwitch @bind-Value="studentModel.IsActive" Label="Is Active" Color="Color.Success" />
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_loading" Size="Size.Medium" OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Medium"
                          Loading="@(_loading)"
                          OnClick="@(async => OnSubmit())"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    [Parameter] public string? Action { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public int? Id { get; set; }
    [Parameter] public StudentModel? studentModel { get; set; }
    [Parameter] public string currentUserId { get; set; }
    StudentModelValidator modelValidator = new StudentModelValidator();
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    MudForm? _form;
    private bool _loading = false;

    void Cancel() => MudDialog.Cancel();


    private async Task OnSubmit()
    {
        if (_form is not null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                _loading = true;

                try
                {
                    if (!Id.HasValue)
                    {
                        studentModel.CreatedBy = currentUserId;
                        var responseExist = await ApiHelper.GetAsync<bool>($"StudentManagement/verify?email={studentModel.Email}&idNumber={studentModel.IdNumber}&id={0}");
                        if (responseExist.IsSuccess)
                        {
                            if (!responseExist.Data)
                            {
                                var response = await ApiHelper.PostAsync<StudentModel, ApiResponse<int>>("StudentManagement/Add", studentModel);

                                if (response.IsSuccess)
                                {
                                    Snackbar.Add("Student added successfully.", Severity.Success);
                                    MudDialog.Close(DialogResult.Ok(true));
                                }
                                else
                                {
                                    Snackbar.Add($"Error: {response.Message}", Severity.Error);
                                }
                            }
                            else
                            {
                                Snackbar.Add($"ID Number/Email already exist",Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add($"Error: {responseExist.Message}", Severity.Error); 
                        }



                    }
                    else
                    {
                        studentModel.UpdatedBy = currentUserId;
                        var responseExist = await ApiHelper.GetAsync<bool>($"StudentManagement/verify?email={studentModel.Email}&idNumber={studentModel.IdNumber}&id={studentModel.Id}");
                        if (responseExist.IsSuccess)
                        {
                            if (!responseExist.Data)
                            {                                
                                var response = await ApiHelper.PutAsync($"StudentManagement/Update/{Id}", studentModel);

                                if (response.IsSuccess)
                                {
                                    Snackbar.Add("Student updated successfully.", Severity.Success);
                                    MudDialog.Close(DialogResult.Ok(true));
                                }
                                else
                                {
                                    Snackbar.Add($"Error: {response.Message}", Severity.Error);
                                }
                            }else
                            {
                                Snackbar.Add($"ID Number/Email already exist", Severity.Error);
                            }
                        }
                       
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
                }
                finally
                {
                    _loading = false;
                }
            }
        }
    }



}
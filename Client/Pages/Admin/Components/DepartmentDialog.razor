@using ICSS.Shared

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@($"fa-solid fa-{Icon}")"></MudIcon>
            @Action Department Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="department">
            <MudStack>
                <MudTextField @bind-Value="department.DepartmentCode" Label="Department Code" Variant="Variant.Outlined" Required RequiredError="Department Code is Required" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="department.DepartmentName" Label="Department Description" Variant="Variant.Outlined" Required RequiredError="Department Description is Required" Margin="Margin.Dense"></MudTextField>                                
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_loading" Size="Size.Medium" OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Medium"
                          Loading="@(_loading)"
                          OnClick="@(async => OnSubmit())"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }

    [Parameter] public string? Action { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Departments department { get; set; }
    [Parameter] public string? currentUserId { get; set; }

    MudForm? _form;
    private bool _loading = false;

    void Cancel() => MudDialog.Cancel();

    private async Task OnSubmit()
    {
        try
        {
            if (_form is not null)
            {
                await _form.Validate();

                if (_form.IsValid)
                {
                    _loading = true;

                    if (department.DepartmentId is null)
                    {
                        department.CreatedBy = currentUserId;
                        var response = await ApiHelper.PostAsync<Departments, ApiResponse<int>>("DepartmentManagement/InsertDepartment", department);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Department added successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }

                    }
                    else
                    {
                        department.UpdatedBy = currentUserId;
                        var response = await ApiHelper.PutAsync("DepartmentManagement/UpdateDepartment", department);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Department updated successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

}
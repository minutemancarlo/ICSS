@using ICSS.Shared


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fa-solid fa-user-shield"></MudIcon>
            Update User Role
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="RoleValue" Color="Color.Primary" CheckMark FixedContent>
            @foreach (var item in Roles)
            {
                <MudToggleItem Value="@item.Id" Text="@item.Name" />
            }
        </MudToggleGroup>
        @if (RoleValue != Roles.FirstOrDefault(x => x.Name == "Student")?.Id)
        {
            <MudSelect @bind-Value="userDepartment" Required RequiredError="Department is Required" T="int?" Clearable Label="Select Department" AdornmentIcon="fa-solid fa-graduation-cap" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                @foreach (var item in departments)
                {
                    <MudSelectItem T="int?" Value="@(item.DepartmentId)">@item.DepartmentName</MudSelectItem>
                }
            </MudSelect>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_loading" Size="Size.Medium" OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
        Color="Color.Success"
        Size="Size.Medium"
        Loading="@(_loading)"
        OnClick="@(async => OnSubmit())"
        ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }

    [Parameter] public string CurrentRole { get; set; }
    [Parameter] public List<RolesProperty> Roles { get; set; }
    [Parameter] public int? userDepartment { get; set; }
    [Parameter] public string? userId { get; set; }
    [Parameter] public string? name { get; set; }
    [Parameter] public string? email { get; set; }
    private string? RoleValue;

    private bool _loading = false;
    private List<Departments> departments = new();

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var role = Roles.FirstOrDefault(x => x.Name == CurrentRole);
        RoleValue = role?.Id;
        await OnLoadDepartments();
    }

    private async Task OnSubmit()
    {
        try
        {
            _loading = true;
            var payload = new SetUserRole
                {
                    RoleId = RoleValue,
                    UserId = userId,
                    Name = name,
                    Email = email,
                    DepartmentId = userDepartment
                };
            var response = await ApiHelper.PostAsync<SetUserRole, ApiResponse<int>>("UserManagement/SetUserRole", payload);

            if (response.IsSuccess)
            {
                Snackbar.Add("User role successfully updated.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add($"Error updating user role: {response.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }finally
        {
            _loading = false;
        }
    }


    private async Task OnLoadDepartments()
    {


        try
        {

            var response = await ApiHelper.GetAsync<List<Departments>>("DepartmentManagement/GetAllDepartments");
            if (response.IsSuccess)
            {
                departments = response.Data;

                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to load departments: {response.Message}", Severity.Error);
            }



        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }

    }


}
@using ICSS.Shared

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@($"fa-solid fa-{Icon}")"></MudIcon>
            @Action Course Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="course">
            <MudStack>
                <MudTextField @bind-Value="course.CourseCode" Label="Course Code" Variant="Variant.Outlined" Margin="Margin.Dense" Required RequiredError="Course Code is Required" />
                <MudTextField @bind-Value="course.CourseName" Label="Course Description" Variant="Variant.Outlined" Margin="Margin.Dense" Required RequiredError="Course Name is Required"></MudTextField>
                <MudSelect @bind-Value="course.Departments" T="Departments" HelperText="Department where the course belongs." HelperTextOnFocus="false" Required RequiredError="Course Department is Required" T="int?" Clearable Label="Select Department" AdornmentIcon="fa-solid fa-school" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                    @foreach (var item in departments)
                    {
                        <MudSelectItem Value="item">@item.DepartmentName</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_loading" Size="Size.Medium" OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
        Color="Color.Success"
        Size="Size.Medium"
        Loading="@(_loading)"
        OnClick="@(async => OnSubmit())"
        ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }

    [Parameter] public string? Action { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Course course { get; set; }
    [Parameter] public string? currentUserId { get; set; }

    private List<Departments>? departments = new();
    MudForm? _form;
    private bool _loading = false;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await OnLoadDepartments();
        await base.OnInitializedAsync();
    }


    private async Task OnSubmit()
    {
        try
        {
            if (_form is not null)
            {
                await _form.Validate();

                if (_form.IsValid)
                {
                    _loading = true;

                    if (course.CourseId is null)
                    {
                        course.CreatedBy = currentUserId;
                        var response = await ApiHelper.PostAsync<Course, ApiResponse<int>>("CourseAndSubject/InsertCourse", course);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Course added successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }

                    }else
                    {
                        course.UpdatedBy = currentUserId;
                        var response = await ApiHelper.PutAsync("CourseAndSubject/UpdateCourse", course);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Course updated successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }
                    }




                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnLoadDepartments()
    {


        try
        {

            var response = await ApiHelper.GetAsync<List<Departments>>("DepartmentManagement/GetAllDepartments");
            if (response.IsSuccess)
            {
                departments = response.Data;

                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to load departments: {response.Message}", Severity.Error);
            }



        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }

    }

}
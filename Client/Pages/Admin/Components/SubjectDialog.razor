@using ICSS.Shared

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@($"fa-solid fa-{Icon}")"></MudIcon>
            @Action Subject Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="subjects">
            <MudStack>                
                <MudTextField @bind-Value="subjects.SubjectCode" Label="Subject Code" Variant="Variant.Outlined" Required RequiredError="Subject Code is Required" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="subjects.SubjectName" Label="Subject Description" Variant="Variant.Outlined" Required RequiredError="Subject Description is Required" Margin="Margin.Dense"></MudTextField>
                <MudSelect @bind-Value="subjects.Departments.DepartmentId" Required RequiredError="Subject Department is Required" T="int?" Clearable Label="Select Department" AdornmentIcon="fa-solid fa-graduation-cap" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                    @foreach (var item in departments)
                    {
                        <MudSelectItem T="int?" Value="@(item.DepartmentId)">@item.DepartmentName</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="YearLevel?" @bind-Value="subjects.YearLevel" Label="Select Year Level" Clearable="true" Required RequiredError="Subject Year Level is Required"
                           AdornmentIcon="fa-solid fa-hashtag" Variant="Variant.Outlined"
                           Margin="Margin.Dense" AdornmentColor="Color.Primary">
                    @foreach (var item in Enum.GetValues<YearLevel>())
                    {
                        <MudSelectItem T="YearLevel?" Value="@item">@item.ToString().Replace("_", " ")</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="Semester?" @bind-Value="subjects.Semester" Label="Select Semester" Clearable="true" Required RequiredError="Subject Semester is Required"
                           AdornmentIcon="fa-solid fa-hashtag" Variant="Variant.Outlined"
                           Margin="Margin.Dense" AdornmentColor="Color.Primary">
                    @foreach (var item in Enum.GetValues<Semester>())
                    {
                        <MudSelectItem T="Semester?" Value="@item">@item.ToString().Replace("_", " ")</MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField HideSpinButtons @bind-Value="subjects.Units" Label="Units" Variant="Variant.Outlined" Min="0" Margin="Margin.Dense"></MudNumericField>
                <MudNumericField HideSpinButtons @bind-Value="subjects.LectureHour" Label="Lecture Hours" Min="0" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField>
                <MudNumericField HideSpinButtons @bind-Value="subjects.LabHour" Label="Laboratory Hours" Min="0" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField>
                <MudNumericField HideSpinButtons @bind-Value="subjects.MaxStudent" Label="Student Capacity" Min="0" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField>
            

                <MudSwitch @bind-Value="subjects.IsActive" Label="Is Active" Color="Color.Success" />

            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="_loading" Size="Size.Medium" OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
        Color="Color.Success"
        Size="Size.Medium"
        Loading="@(_loading)"
        OnClick="@(async => OnSubmit())"
        ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }

    [Parameter] public string? Action { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public Subjects subjects { get; set; }
    [Parameter] public string? currentUserId { get; set; }

    MudForm? _form;
    private bool _loading = false;
    private List<Departments> departments = new();
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await OnLoadDepartments();
        await base.OnInitializedAsync();
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_form is not null)
            {
                await _form.Validate();

                if (_form.IsValid)
                {
                    _loading = true;

                    if (subjects.SubjectId is null)
                    {
                        subjects.CreatedBy = currentUserId;
                        var response = await ApiHelper.PostAsync<Subjects, ApiResponse<int>>("CourseAndSubject/InsertSubject", subjects);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Subject added successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }

                    }
                    else
                    {
                        subjects.UpdatedBy = currentUserId;
                        var response = await ApiHelper.PutAsync("CourseAndSubject/UpdateSubject", subjects);

                        if (response.IsSuccess)
                        {
                            Snackbar.Add("Subject updated successfully.", Severity.Success);
                            MudDialog.Close(DialogResult.Ok(true));
                        }
                        else
                        {
                            Snackbar.Add($"Error: {response.Message}", Severity.Error);
                        }
                    }




                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }


    private async Task OnLoadDepartments()
    {
        

        try
        {
          
                var response = await ApiHelper.GetAsync<List<Departments>>("DepartmentManagement/GetAllDepartments");
                if (response.IsSuccess)
                {
                    departments = response.Data;
           
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load departments: {response.Message}", Severity.Error);
                }
            
          

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
      
    }

}
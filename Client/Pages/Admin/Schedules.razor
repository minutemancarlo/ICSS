@page "/manage-schedules"
@attribute [Authorize(Roles = "Admin,Faculty")]
@layout MainLayout
@using ICSS.Client.Pages.Admin.Components
@using ICSS.Shared
@using System.Net

@using SectionsModel = ICSS.Shared.Sections
@using TaskStatus = ICSS.Shared.TaskStatus

<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>
        <MudItem xs="12">
            @if (!MainLayout.IsOnline)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Style="margin-bottom: 16px;" Visible="!isOnline">
                    You are currently offline. Data may not be up-to-date.
                </MudAlert>
            }
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="w-100" Style="background-color: #1abc9c; color: white">
                <MudText Typo="Typo.h6" Class="fw-bold p-2">Schedule Generation</MudText>
            </MudPaper>

            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            @* <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Style="margin-bottom: 16px;">
                Note: You are generating schedule for all departments.
            </MudAlert> *@

            <MudDataGrid Items="scheduleRequests" Dense Hover Filterable Striped Virtualize ShowColumnOptions Hideable ShowMenuIcon Loading="isLoading">
                <ToolBarContent>
                    <MudStack>
                        <MudStack Row Spacing="1">
                            <MudSelect T="int?" @bind-Value="SelectedDepartment" FullWidth ReadOnly="isUserHasDepartment" Clearable="!isUserHasDepartment" Label="Select Department" AdornmentIcon="fa-solid fa-school" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                                @foreach (var item in departments)
                                {
                                    <MudSelectItem T="int?" Value="@(item.DepartmentId)">@item.DepartmentName</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect @bind-Value="selectedCourse" @ref="mudSelect" T="Course" FullWidth Clearable Label="Select Course" AdornmentIcon="fa-solid fa-graduation-cap" Variant="Variant.Outlined" Margin="Margin.Dense" AdornmentColor="Color.Primary">
                                @foreach (var item in coursesTemp)
                                {
                                    <MudSelectItem T="Course" Value="@(item)">@item.CourseName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>
                    </MudStack>
                    <MudSpacer />

                    <MudBreakpointProvider>
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                            <MudButton Size="Size.Small" StartIcon="fa-solid fa-calendar-days" OnClick="OnGenerateSchedule" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                Generate Schedules
                            </MudButton>
                            <MudLoadingButton Variant="Variant.Filled"
                            Color="Color.Info"
                            Size="Size.Small"
                            Loading="@(_loading)"
                            StartIcon="fa-solid fa-file-pdf"
                            OnClick="OnDownloadSchedules"
                            Class="my-2 mx-1"
                            ButtonType="ButtonType.Button">
                                <LoadingContent>Generating File...</LoadingContent>
                                <ChildContent>Export to PDF</ChildContent>
                            </MudLoadingButton>
                            <MudButton Size="Size.Small" StartIcon="fa-solid fa-refresh" OnClick="OnGetScheduleList" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Class="my-2 mx-1" Disabled="!MainLayout.IsOnline">
                                Refresh
                            </MudButton>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                            <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="OnGenerateSchedule" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-user-plus" Color="Color.Success" Disabled="!MainLayout.IsOnline" />
                            <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="OnGetScheduleList" Class="my-2 mx-1" Size="Size.Small" Icon="fa-solid fa-refresh" Color="Color.Primary" Disabled="!MainLayout.IsOnline" />
                        </MudHidden>
                    </MudBreakpointProvider>

                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="Actions" HeaderClass="data-grid text-nowrap text-white" Hideable="false">
                        <CellTemplate>
                            <MudStack Row>
                                <MudTooltip Text="View Schedule">
                                    <MudIconButton Icon="fa-solid fa-eye" Disabled="@(context.Item.TaskStatus!=TaskStatus.Success)" Size="Size.Medium" Color="Color.Info" Variant="Variant.Filled" OnClick="@(() => OnShowSchedules(context.Item.Section,context.Item.Course, context.Item.YearLevel,context.Item.Semester,context.Item.ScheduleId))" />
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Course.CourseName" Title="Course" Sortable="true" HeaderClass="data-grid text-nowrap text-center text-white" CellClass="text-nowrap text-center" />
                    <PropertyColumn Property="x => x.Section.SchoolYear" Title="School Year" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.Section.SectionName" Title="Section" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.YearLevel" Title="Year Level" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@context.Item.YearLevel.ToString().Replace("_", " ")</MudText>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Semester" Title="Semester" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@context.Item.Semester.ToString().Replace("_", " ")</MudText>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.IsActive" Title="Is Active Schedule" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            @if (context.Item.IsActive)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Success">Active</MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Error">In Active</MudChip>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TaskStatus" Title="Status" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            @if (context.Item.TaskStatus == ICSS.Shared.TaskStatus.On_Queue)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Default">On Queue</MudChip>
                            }
                            else if (context.Item.TaskStatus == ICSS.Shared.TaskStatus.Processing)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Info">Processing</MudChip>
                            }
                            else if (context.Item.TaskStatus == ICSS.Shared.TaskStatus.Success)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Success">Success</MudChip>
                            }
                            else if (context.Item.TaskStatus == ICSS.Shared.TaskStatus.Failed)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Error">Failed</MudChip>
                            }
                            else if (context.Item.TaskStatus == ICSS.Shared.TaskStatus.Cancelled)
                            {
                                <MudChip Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning">Cancelled</MudChip>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Sortable="true" Hideable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.CreatedBy</MudText>
                                <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.CreatedOn</MudText>
                            </MudStack>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" Sortable="true" Hideable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.body2" Class="fw-bold">@context.Item.UpdatedBy</MudText>
                                <MudText Typo="Typo.body2" Class="fw-italic">@context.Item.UpdatedOn</MudText>
                            </MudStack>
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>

                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading Content...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudDataGridPager T="ScheduleRequest" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    MudSelect<Course>? mudSelect;

    private List<ScheduleRequest> scheduleRequests = new();
    private Departments? userDepartment = new();
    private List<Departments>? departments = new();
    private List<string>? schoolYears = new();
    private List<Course> courses = new();
    private List<Course> coursesTemp = new();

    private List<SectionsModel>? sections = new();
    private List<string>? schoolYear = new();
    private List<YearLevel?>? yearLevel = new();
    private List<string>? sectionFilter = new();
    private bool _loading = false;
    private int? selectedDepartment;
    public int? SelectedDepartment
    {
        get => selectedDepartment;
        set
        {
            selectedDepartment = value;
            OnChangeDepartment(selectedDepartment);
            InvokeAsync(() => StateHasChanged());
        }
    }

    private YearLevel? selectedYearLevel;
    private string? selectedSchoolYear;
    private Course? selectedCourse;

    private bool isLoading = true;
    private bool isUserHasDepartment = false;

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Schedule Management";
        await OnLoadDepartments();
        await GetUserDepartment();
        await OnGetCourses();
        await OnGetScheduleList();
        await base.OnInitializedAsync();
    }


    private async Task OnDownloadSchedules()
    {
        try
        {
            _loading = true;
            if (selectedDepartment is null)
            {
                Snackbar.Add("Please select a department.", Severity.Error);
                _loading = false;
                return;
            }
            var response = await HttpClient.GetAsync($"ReportsManagement/GetReportScheduleById?Id=&departmentId={selectedDepartment}");

            if (response.IsSuccessStatusCode)
            {
                var pdfContent = await response.Content.ReadAsByteArrayAsync();
                var blobUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfContent)}";
                var timestamp = DateTime.Now.ToString("MMddyyyyHHmmss");
                var fileName = $"ScheduleReport_{timestamp}.pdf";

                await JSRuntime.InvokeVoidAsync("downloadFile", blobUrl, fileName);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error generating pdf file: {response.StatusCode} - {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An exception occured: {ex.Message}", Severity.Error);
        }
        await Task.Delay(2000);
    }

    private async Task OnShowSchedules(SectionsModel? sections, Course? course, YearLevel? yearLevel, Semester? semester, int? scheduleId)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Large,
                    BackdropClick = false,
                    CloseButton = true,
                    BackgroundClass = "blurred"

                };

            var response = await ApiHelper.GetAsync<List<ScheduleTimeSlot>>($"ScheduleManagement/GetScheduleById/{scheduleId}");
            List<ScheduleTimeSlot>? slots = new();
            if (response.IsSuccess)
            {
                slots = response.Data;
            }
            else
            {
                Snackbar.Add("Unable to get Schedule Information", Severity.Error);
            }


            var parameters = new DialogParameters<ScheduleDialog>
            {
                { x => x.section, sections?.SectionName },
                { x => x.courseCode, course?.CourseCode },
                { x => x.schoolYear, sections?.SchoolYear},
                { x => x.yearLevel, yearLevel.ToString().Replace("_"," ")},
                { x => x.semester, semester.ToString().Replace("_"," ")},
                { x => x.scheduleTimeSlots, slots}

            };

            var dialog = await DialogService.ShowAsync<ScheduleDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnGenerateSchedule()
    {
        try
        {
            if (selectedDepartment is null)
            {
                Snackbar.Add($"Please select a Department", Severity.Error);
                return;

            }

            if (selectedCourse is null)
            {
                Snackbar.Add($"Please select a Course", Severity.Error);
                return;
            }

            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };
            string actionMessage = "Generate Schedule";
            string message = $"Note: If there are existing schedules for {selectedCourse.CourseName}, they will be marked as inactive. Are you sure you want to generate a new set of schedules?";

            var parameters = new DialogParameters<ConfirmationDialog>
            {
                { x => x.Action, actionMessage },
                {x => x.Message, message}
            };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                var confirmed = (bool)result.Data;
                if (confirmed == true)
                {
                    var payload = new ScheduleRequest
                        {
                            Course = selectedCourse,
                            CreatedBy = MainLayout.CurrentUserId
                        };

                    var response = await ApiHelper.PostAsync<ScheduleRequest, ApiResponse<int>>($"ScheduleManagement/InsertScheduleRequest", payload);

                    if (response.IsSuccess)
                    {
                        Snackbar.Add("Schedule Request successfully added to Queue", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add($"Error: {response.Message}", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            await OnGetScheduleList();
        }
    }


    private void OnChangeDepartment(int? value)
    {
        mudSelect?.Clear();
        if (courses.Any())
        {
            coursesTemp = courses.Where(c => c.Departments?.DepartmentId == value).GroupBy(c => c.CourseName).Select(g => g.First()).ToList();
        }

    }





    private async Task GetUserDepartment()
    {
        try
        {
            var response = await HttpClient.GetAsync($"UserManagement/GetUserDepartment/{MainLayout.CurrentUserId}");

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == HttpStatusCode.NoContent)
                {
                    isUserHasDepartment = false;
                    SelectedDepartment = null;
                    return;
                }

                var department = await response.Content.ReadFromJsonAsync<Departments>();

                if (department is not null)
                {
                    userDepartment = department;
                    isUserHasDepartment = true;
                    SelectedDepartment = userDepartment.DepartmentId;
                }
                else
                {
                    isUserHasDepartment = false;
                    selectedDepartment = null;
                }
            }
            else
            {
                Snackbar.Add($"Error: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error getting user department data: {ex.Message}", Severity.Error);
        }
    }




    private async Task OnLoadDepartments()
    {


        try
        {

            var response = await ApiHelper.GetAsync<List<Departments>>("DepartmentManagement/GetAllDepartments");
            if (response.IsSuccess)
            {
                departments = response.Data;

                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to load departments: {response.Message}", Severity.Error);
            }



        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }

    }

    private async Task OnGetCourses()
    {
        try
        {
            var response = await ApiHelper.GetAsync<List<Course>>("CourseAndSubject/GetAllCourses");
            if (response.IsSuccess)
            {
                courses = response.Data;
                if (isUserHasDepartment)
                {
                    OnChangeDepartment(selectedDepartment);
                }
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to load courses: {response.Message}", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }



    private async Task OnGetSections()
    {


        try
        {

            var response = await ApiHelper.GetAsync<List<SectionsModel>>("SectionManagement/GetSections");
            if (response.IsSuccess)
            {
                sections = response.Data;
                if (isUserHasDepartment)
                {
                    // courses = courses.Where(c => c.Departments?.DepartmentId == selectedDepartment).GroupBy(c => c.CourseName).Select(g => g.First()).ToList();

                    var filteredSections = sections.Where(s => courses.Any(fc => fc.CourseId == s.CourseId)).ToList();
                    // schoolYear = filteredSections.Select(s => s.SchoolYear).Distinct().ToList();
                    // yearLevel = filteredSections.Where(s => s.YearLevel != null).Select(s => s.YearLevel).Distinct().ToList();
                    // sectionFilter = filteredSections.GroupBy(s => s.SectionName).Select(g => g.First().SectionName).OrderBy(name => name).ToList();
                }
                else
                {
                    courses = new();
                    // courses = sections.Where(s => s.Course != null).DistinctBy(s => s.Course.CourseName).Select(s => s.Course).ToList();
                    // schoolYear = sections.Where(s => !string.IsNullOrEmpty(s.SchoolYear)).Select(s => s.SchoolYear).Distinct().ToList();
                    // yearLevel = sections.Where(s => s.YearLevel != null).Select(s => s.YearLevel).Distinct().ToList();
                    // sectionFilter = sections.Where(s => !string.IsNullOrEmpty(s.SectionName) && !s.IsDeleted).Select(s => s.SectionName!).Distinct().OrderBy(s => s).ToList();
                }

                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to load sections: {response.Message}", Severity.Error);
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {



            isLoading = false;
        }
    }


    private async Task OnGetScheduleList()
    {


        try
        {
            isLoading = true;
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<ScheduleRequest>>("ScheduleManagement/GetScheduleList");
                if (response.IsSuccess)
                {
                    scheduleRequests = response.Data;
                    if (MainLayout.IsFacultyWithDepartment)
                    {
                        scheduleRequests = scheduleRequests.Where(x => x.Departments?.DepartmentId == MainLayout.FacultyDepartment?.DepartmentId).ToList();
                    }
                    await LocalStorage.SetItemAsync("schedulRequests", scheduleRequests);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load schedules: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<ScheduleRequest>>("schedulRequests");
                scheduleRequests = cachedData ?? new List<ScheduleRequest>();
                StateHasChanged();
            }





        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }finally{
            isLoading = false;
        }

    }





}
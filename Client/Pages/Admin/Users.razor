@page "/users"
@layout MainLayout
@attribute [Authorize(Roles = "Admin")]
@using ICSS.Shared
@using ICSS.Client.Helpers
@using ICSS.Client.Pages.Admin.Components

<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid>

        <MudItem xs="12">               
            @if (!MainLayout.IsOnline)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Style="margin-bottom: 16px;" Visible="!isOnline">
                    You are currently offline. Data may not be up-to-date.
                </MudAlert>
            }                                                
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="w-100" Style="background-color: #1abc9c; color: white">
                <MudText Typo="Typo.h6" Class="fw-bold p-2">Users List</MudText>
            </MudPaper>

            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudDataGrid @ref="_table" T="UserProperties" Items="@userPropertiesTemp" Loading="@isLoading"  Dense Hover Filterable Striped Virtualize>
                <ToolBarContent>
                    <MudBreakpointProvider>
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                            <MudButton OnClick="RefreshUserData" Size="Size.Small" StartIcon="fa-solid fa-refresh" IconSize="Size.Small" Variant="Variant.Filled" Color="Color.Primary" Disabled="!MainLayout.IsOnline">
                                Refresh
                            </MudButton>
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                            <MudIconButton ButtonType="ButtonType.Button" OnClick="RefreshUserData" Size="Size.Small" Icon="fa-solid fa-refresh" Variant="Variant.Filled" Color="Color.Primary" Disabled="!MainLayout.IsOnline"/>                            
                        </MudHidden>
                    </MudBreakpointProvider>

                    <MudSpacer />
                    <MudTextField ValueChanged="@(s=>Onsearch(s))" T="string" Immediate Placeholder="Search here.." Adornment="Adornment.Start" IconSize="Size.Small" AdornmentIcon="fa-solid fa-search" Margin="Margin.Dense" Variant="Variant.Text"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="Actions" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            <MudStack Row>
                                <MudTooltip Text="Update Role">
                                    <MudIconButton Icon="fa-solid fa-user-shield" Size="Size.Medium" Color="Color.Info" Variant="Variant.Filled" Disabled="@(context.Item.User_Id==MainLayout.CurrentUserId||!MainLayout.IsOnline)" OnClick="@(async () => await OnShowUpdateRole(context.Item.Role,context.Item.User_Id,context.Item.Departments?.DepartmentId,$"{context.Item.FirstName} {context.Item.LastName}",context.Item.Email))" />
                                </MudTooltip>
                                <MudTooltip Text="@(context.Item.Blocked?"Enable Access":"Disable Access")">
                                    <MudIconButton Icon="@(!context.Item.Blocked?"fa-solid fa-user-slash":"fa-solid fa-user")" Size="Size.Medium" Color="@(context.Item.Blocked?Color.Success:Color.Error)" Variant="Variant.Filled" Disabled="@(context.Item.User_Id==MainLayout.CurrentUserId||!MainLayout.IsOnline)" OnClick="@(() => OnUpdateUserAccess(context.Item.User_Id,context.Item.Blocked?"enable":"disable"))" />
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Picture" Title="Profile" HeaderClass="data-grid text-nowrap text-white" Filterable="false" Sortable="false">
                        <CellTemplate>
                            @if (context.Item.Picture.Contains("apis.live.net"))
                            {
                                <MudAvatar Rounded="true" Variant="Variant.Filled" Style="height:50px; width:50px; font-size: 1.5rem;" Color="Color.Primary">@($"{context.Item.FirstName.Substring(0, 1)}{context.Item.LastName.Substring(0, 1)}")</MudAvatar>
                            }
                            else
                            {
                                <MudImage Src="@context.Item.Picture" Alt="profile" Height="50" Width="50" Elevation="25" Class="rounded-lg" />                                
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.FirstName" Title="Name" Sortable="true" HeaderClass="data-grid text-nowrap text-white" CellClass="text-nowrap">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@StringHelper.ToSentenceCase(context.Item.FirstName) @StringHelper.ToSentenceCase(context.Item.LastName)</MudText>
                        </CellTemplate>
                    </PropertyColumn>                    
                    <PropertyColumn Property="x => x.Email" Title="Email Address" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.Provider" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.Role" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.Departments.DepartmentName" Title="Department Access" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />
                    <PropertyColumn Property="x => x.Blocked" Title="Access Status" Sortable="true" HeaderClass="data-grid text-nowrap text-white">
                        <CellTemplate>
                            @if (context.Item.Blocked)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small">Disabled</MudChip>
                            }else
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">Enabled</MudChip>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Last_Login" Title="Last Login" Sortable="true" HeaderClass="data-grid text-nowrap text-white" />

                </Columns>
                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading Content...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudDataGridPager T="UserProperties" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }

    private List<UserProperties> userProperties = new();
    private List<UserProperties> userPropertiesTemp = new();
    private List<RolesProperty> rolesProperty = new();
    private bool isLoading = true;

    private string? roleId;
    private string? searchText;
    private MudDataGrid<UserProperties> _table = default!;
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "User Management";        
        await OnGetRoles();
        await LoadUserData();
        await base.OnInitializedAsync();
    }

    private async Task Onsearch(string query)
    {

        userPropertiesTemp = userProperties.Where(data =>
           {
               if (string.IsNullOrWhiteSpace(query))
                   return true;
               if (data.FirstName.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               if (data.LastName.Contains(query, StringComparison.OrdinalIgnoreCase))
                   return true;
               return false;
           }).ToList();
    }

    private async Task OnShowUpdateRole(string role,string userid,int? departmentId,string? name, string? email)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseButton = false,
                BackgroundClass = "blurred"

            };
        var parameters = new DialogParameters<UpdateRoleDialog>
            {
                { x => x.CurrentRole, role },
                {x => x.Roles, rolesProperty},
                {x => x.userId, userid },
                {x => x.userDepartment, departmentId},
                {x => x.name, name},
                {x => x.email, email}
            };

        var dialog = await DialogService.ShowAsync<UpdateRoleDialog>("",parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUserData();
        }
    }

    private async Task OnUpdateUserAccess(string userId,string access)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = false,
                    CloseButton = false,
                    BackgroundClass = "blurred"

                };

            var parameters = new DialogParameters<ConfirmationDialog>
            {
                { x => x.Action, "Update User Access" },
                {x => x.Message, $"Are you sure you want to {access} access for this user?"}
            };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                var confirmed = (bool)result.Data;
                if (confirmed == true)
                {
                    isLoading = true;
                    var blockStatus = new { block = access == "enable" ? false : true };
                    // var response = await ApiHelper.PatchAsync(object,< ApiResponse >, $"UserManagement/update-block-status/{userId}", blockStatus);
                    var response = await ApiHelper.PatchAsync<object, ApiResponse>($"UserManagement/update-block-status/{userId}?block={blockStatus.block}", blockStatus);
                    if (response.IsSuccess)
                    {                                             
                        Snackbar.Add($"User successfully {access}d access.",Severity.Success);                        
                        await LoadUserData();
                        StateHasChanged();    
                    }
                    else
                    {
                        Snackbar.Add($"Error: {response.Message}", Severity.Error);                        
                    }
                    
                }                                
            }
        }catch(Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task LoadUserData()
    {
        try
        {
            isLoading = true;

            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<UserProperties>>("UserManagement/UsersList");

                if (response.IsSuccess)
                {
                    userProperties = response.Data;
                    userPropertiesTemp = userProperties;
                    await LocalStorage.SetItemAsync("userProperties", userProperties);                    
                    StateHasChanged();
                }
                else
                {                    
                    Snackbar.Add($"Error: {response.Message}",Severity.Error);
                }                
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<UserProperties>>("userProperties");
                userProperties = cachedData ?? new List<UserProperties>();
                userPropertiesTemp = userProperties;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading user data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnGetRoles()
    {
        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<RolesProperty>>("UserManagement/GetAllRoles");

                if (response.IsSuccess)
                {
                    rolesProperty = response.Data;
                    await LocalStorage.SetItemAsync("rolesProperty", rolesProperty);
                }
                else
                {                    
                    Snackbar.Add($"Error: {response.Message}",Severity.Error);
                }                
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<RolesProperty>>("rolesProperty");
                rolesProperty = cachedData ?? new List<RolesProperty>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error getting roles data: {ex.Message}", Severity.Error);
        }
    }

    private async Task RefreshUserData()
    {
        if (!MainLayout.IsOnline)
        {
            Snackbar.Add("You are offline. Cannot refresh data.", Severity.Warning);
            return;
        }

        try
        {
            isLoading = true;
            var response = await ApiHelper.GetAsync<List<UserProperties>>("UserManagement/UsersList");

            if (response.IsSuccess)
            {
                userProperties = response.Data;
                userPropertiesTemp = userProperties;
                await LocalStorage.SetItemAsync("userProperties", userProperties);
            }
            else
            {                
                Snackbar.Add($"Error: {response.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error refreshing data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

   
}

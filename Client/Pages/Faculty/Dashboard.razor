@page "/faculty-dashboard"
@attribute [Authorize(Roles = "Faculty")]
@layout MainLayout
@using System.Security.Claims
@using ICSS.Shared
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
    <MudGrid Style="--icon-opacity: 0.1">
        <div class="cover" style="position: relative; width: 100%; height: 300px; background: url('banner.jpg') no-repeat center center/cover;">
            <div class="overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.3);"></div>
            <div class="card" style="position: absolute; bottom: 20px; left: 20px; background: white; padding: 15px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                <h2 style="margin-bottom: 5px; font-size: 18px;">Hello @FirstName @LastName</h2>
                <p style="font-size: 14px; color: gray;">Integrated Class Scheduling System &copy; @DateTime.Now.Year</p>
            </div>
        </div>

        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card" Elevation="6">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
                        <MudIconButton Icon="fa-solid fa-users" Color="Color.Primary" Size="Size.Large" Ripple="false"
                                       Class="icon-btn" />
                        <MudText Typo="Typo.h5" Class="fw-bold">Users</MudText>
                    </MudStack>
                    <MudStack Row Style="position: relative">
                        <MudOverlay @bind-Visible="_loading" DarkBackground AutoClose="false" Absolute="true">
                            <MudLoading @bind-Loading="_loading" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                                        Color="Color.Primary" />
                        </MudOverlay>
                        <MudPaper Class="w-100" Elevation="4" Style="background-color: var(--mud-palette-info);color: var(--mud-palette-appbar-text);">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="fw-bold">Subjects</MudText>
                                <MudText Typo="Typo.h3">@data?.ElementAtOrDefault(5)</MudText>
                            </MudStack>
                        </MudPaper>
                     
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card" Elevation="6">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
                        <MudIconButton Icon="fa-solid fa-user-graduate" Color="Color.Primary" Size="Size.Large" Ripple="false"
                                       Class="icon-btn" />
                        <MudText Typo="Typo.h5" Class="fw-bold">Students</MudText>
                    </MudStack>
                    <MudStack Row Style="position: relative">
                        <MudOverlay @bind-Visible="_loading" DarkBackground AutoClose="false" Absolute="true">
                            <MudLoading @bind-Loading="_loading" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                                        Color="Color.Primary" />
                        </MudOverlay>
                        <MudPaper Class="w-100" Elevation="4" Style="background-color: var(--mud-palette-success-darken);color: var(--mud-palette-appbar-text);">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="fw-bold">Active</MudText>
                                <MudText Typo="Typo.h3">@data?.ElementAtOrDefault(2)</MudText>
                            </MudStack>
                        </MudPaper>
                        <MudPaper Class="w-100" Elevation="4" Style="background-color: var(--mud-palette-error-darken);color: var(--mud-palette-appbar-text);">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="fw-bold">Not Active</MudText>
                                <MudText Typo="Typo.h3">@data?.ElementAtOrDefault(3)</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudCard Class="dashboard-card" Elevation="6">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
                        <MudIconButton Icon="fa-solid fa-building-user" Color="Color.Primary" Size="Size.Large" Ripple="false"
                                       Class="icon-btn" />
                        <MudText Typo="Typo.h5" Class="fw-bold">Faculty</MudText>
                    </MudStack>
                    <MudStack Row Style="position: relative">
                        <MudOverlay @bind-Visible="_loading" DarkBackground AutoClose="false" Absolute="true">
                            <MudLoading @bind-Loading="_loading" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                                        Color="Color.Primary" />
                        </MudOverlay>
                        <MudPaper Class="w-100" Elevation="4" Style="background-color: var(--mud-palette-success-darken);color: var(--mud-palette-appbar-text);">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="fw-bold">With Schedule</MudText>
                                <MudText Typo="Typo.h3">@data?.ElementAtOrDefault(4)</MudText>
                            </MudStack>
                        </MudPaper>
                        <MudPaper Class="w-100" Elevation="4" Style="background-color: var(--mud-palette-error-darken);color: var(--mud-palette-appbar-text);">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="fw-bold">W/O Schedule</MudText>
                                <MudText Typo="Typo.h3">@data?.ElementAtOrDefault(5)</MudText>
                            </MudStack>
                        </MudPaper>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>


    </MudGrid>
</MudContainer>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ApiRequestHelper ApiHelper { get; set; }

    private bool _loading = true;
    private List<int>? data;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private string FirstName, LastName;
    private string IconBackground => "background-color: rgba(var(--mud-palette-primary-rgb), 0.2);";
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            if (state.User.Identity.IsAuthenticated)
            {
                var user = authenticationState.Result.User;

                FirstName = state?.User.Claims
                      .Where(c => c.Type.Equals("given_name"))
                      .Select(c => c.Value)
                      .FirstOrDefault() ?? string.Empty;

                LastName = state?.User.Claims
                             .Where(c => c.Type.Equals("family_name"))
                             .Select(c => c.Value)
                             .FirstOrDefault() ?? string.Empty;
            }
        }
        MainLayout.SubTitle = "Faculty Dashboard";
        await LoadData();
        await base.OnInitializedAsync();
    }



    private async Task LoadData()
    {
        _loading = true;

        try
        {
            if (MainLayout.IsOnline)
            {
                var response = await ApiHelper.GetAsync<List<int>>($"DepartmentManagement/GetDashboardStatistics?departmentId={MainLayout.FacultyDepartment.DepartmentId ?? null}");
                if (response.IsSuccess)
                {
                    data = response.Data;
                    await LocalStorage.SetItemAsync("dashboardData", data);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to load dashboard data: {response.Message}", Severity.Error);
                }
            }
            else
            {
                var cachedData = await LocalStorage.GetItemAsync<List<int>>("dashboardData");
                data = cachedData ?? new List<int>();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

}
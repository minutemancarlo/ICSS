@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(AuthLayout)">
                <Authorizing>
                    <div class="vh-100 vw-100 d-flex justify-content-center align-items-center" style="background-image: url('background.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat;">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            <MudText Typo="Typo.body2" Class="fw-bolder">Determining session state...</MudText>
                        </MudStack>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @RedirectToLogin()
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(AuthLayout)">
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private RenderFragment RedirectToLogin() => builder =>
    {
        var uriHelper = NavigationManager ?? throw new InvalidOperationException("NavigationManager not found");
        uriHelper.NavigateTo("authentication/login");
    };

    [Inject] private NavigationManager NavigationManager { get; set; }
}




